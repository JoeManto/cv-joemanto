{"ast":null,"code":"import _classCallCheck from \"/Users/joemanto/Documents/CS/WebstormProjects/blogpostexample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/joemanto/Documents/CS/WebstormProjects/blogpostexample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/joemanto/Documents/CS/WebstormProjects/blogpostexample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joemanto/Documents/CS/WebstormProjects/blogpostexample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/joemanto/Documents/CS/WebstormProjects/blogpostexample/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/joemanto/Documents/CS/WebstormProjects/blogpostexample/src/projects/sheetie.js\";\nimport React from \"react\";\nimport { Header } from \"../blog/blog.js\";\nimport \"../landingStyles.css\";\nimport sheetieLogoSrc from \"./sheetie_logo.png\";\nimport { JMImage, JMCode } from \"../blog/blog\";\nexport var Sheetie =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Sheetie, _React$Component);\n\n  function Sheetie() {\n    _classCallCheck(this, Sheetie);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Sheetie).apply(this, arguments));\n  }\n\n  _createClass(Sheetie, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"content-cnt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, React.createElement(Header, {\n        name: \"Sheetie\",\n        subtitle: \"Open-Source Project developed in 2016\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        style: {\n          marginTop: \"100px\"\n        },\n        className: \"content-text space-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, \"Sheetie is a sketch 3 plugin developed for indie game developers in mind. Sheetie creates vectorized sprite sheet objects that are automatically placed and rendered into a sketch art-board\"), React.createElement(JMImage, {\n        position: \"center\",\n        width: \"300px\",\n        height: \"auto\",\n        src: sheetieLogoSrc,\n        subtitle: \"Copyright Joseph Manto 2019\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"content-text space-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, \"Sheetie is written in a sketch wrapper language on obj-c called cocoa-script. Which gives you access to the underlining Obj-c api and access the the sketch development api.\"), React.createElement(JMCode, {\n        code: codeblock1,\n        language: \"Objective-C\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Sheetie;\n}(React.Component);\nvar codeblock1 = \"\\nfunction makeGrid(size){\\n\\n   var rect;\\n   var shapeGroup;\\n   var fill;\\n   var group = [[NSMutableArray alloc] init];\\n\\n   for(var i = 1;i*size <= width;i++){\\n        rect = MSRectangleShape.alloc().init();\\n        rect.frame = MSRect.rectWithRect(NSMakeRect(i*size, 0, 1, height));\\n        shapeGroup = MSShapeGroup.shapeWithPath(rect);\\n        shapeGroup.style().addStylePartOfType(0)\\n        fill = shapeGroup.style().fills().firstObject();\\n        fill.color = MSColor.colorWithRed_green_blue_alpha(181/255,9/255,255/255,1.0)\\n        [group addObject:shapeGroup];\\n   }\\n   for(var i = 1;i*size <= height;i++){\\n        rect = MSRectangleShape.alloc().init();\\n        rect.frame = MSRect.rectWithRect(NSMakeRect(0, i*size, width, 1));\\n        shapeGroup = MSShapeGroup.shapeWithPath(rect);\\n        shapeGroup.style().addStylePartOfType(0);\\n        fill = shapeGroup.style().fills().firstObject();\\n        fill.color = MSColor.colorWithRed_green_blue_alpha(181/255,9/255,255/255,1.0)\\n        [group addObject:shapeGroup];\\n   }\\n  var layer = MSLayerGroup.alloc().init();\\n  [layer addLayers:group];\\n  [layer setIsLocked:true];\\n  [layer setName:@\\\"Contents\\\"]\\n  artboard.addLayers([layer]);\\n};\";\n/*\r\n* function makeGrid(size){\r\n\r\n   var rect;\r\n   var shapeGroup;\r\n   var fill;\r\n   var group = [[NSMutableArray alloc] init];\r\n\r\n   for(var i = 1;i*size <= width;i++){\r\n        rect = MSRectangleShape.alloc().init();\r\n        rect.frame = MSRect.rectWithRect(NSMakeRect(i*size, 0, 1, height));\r\n        shapeGroup = MSShapeGroup.shapeWithPath(rect);\r\n        shapeGroup.style().addStylePartOfType(0)\r\n        fill = shapeGroup.style().fills().firstObject();\r\n        fill.color = MSColor.colorWithRed_green_blue_alpha(181/255,9/255,255/255,1.0)\r\n        [group addObject:shapeGroup];\r\n   }\r\n   for(var i = 1;i*size <= height;i++){\r\n        rect = MSRectangleShape.alloc().init();\r\n        rect.frame = MSRect.rectWithRect(NSMakeRect(0, i*size, width, 1));\r\n        shapeGroup = MSShapeGroup.shapeWithPath(rect);\r\n        shapeGroup.style().addStylePartOfType(0);\r\n        fill = shapeGroup.style().fills().firstObject();\r\n        fill.color = MSColor.colorWithRed_green_blue_alpha(181/255,9/255,255/255,1.0)\r\n        [group addObject:shapeGroup];\r\n   }\r\n  var layer = MSLayerGroup.alloc().init();\r\n  [layer addLayers:group];\r\n  [layer setIsLocked:true];\r\n  [layer setName:@\"Contents\"]\r\n  artboard.addLayers([layer]);\r\n};*/","map":{"version":3,"sources":["/Users/joemanto/Documents/CS/WebstormProjects/blogpostexample/src/projects/sheetie.js"],"names":["React","Header","sheetieLogoSrc","JMImage","JMCode","Sheetie","marginTop","codeblock1","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,sBAAP;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,SAAQC,OAAR,EAAgBC,MAAhB,QAA6B,cAA7B;AAEA,WAAaC,OAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BACW;AACP,aACE;AAAK,QAAA,SAAS,EAAE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,SAAd;AAAyB,QAAA,QAAQ,EAAE,uCAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAG,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAV;AAAgC,QAAA,SAAS,EAAE,yBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wMAFF,EAME,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAI,QAArB;AAA+B,QAAA,KAAK,EAAG,OAAvC;AAA+C,QAAA,MAAM,EAAG,MAAxD;AAA+D,QAAA,GAAG,EAAIJ,cAAtE;AAAsF,QAAA,QAAQ,EAAI,6BAAlG;AAAiI,QAAA,GAAG,EAAI,MAAxI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAQE;AAAG,QAAA,SAAS,EAAE,yBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wLARF,EAaE,oBAAC,MAAD;AACI,QAAA,IAAI,EAAEK,UADV;AAEI,QAAA,QAAQ,EAAE,aAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbF,CADF;AAoBD;AAtBH;;AAAA;AAAA,EAA6BP,KAAK,CAACQ,SAAnC;AAyBA,IAAMD,UAAU,ysCAAhB;AAgCA","sourcesContent":["import React from \"react\";\r\nimport { Header } from \"../blog/blog.js\";\r\nimport \"../landingStyles.css\";\r\nimport sheetieLogoSrc from \"./sheetie_logo.png\";\r\nimport {JMImage,JMCode} from \"../blog/blog\";\r\n\r\nexport class Sheetie extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={\"content-cnt\"}>\r\n        <Header name={\"Sheetie\"} subtitle={\"Open-Source Project developed in 2016\"} />\r\n        <p style={{marginTop: \"100px\"}} className={\"content-text space-left\"}>\r\n          Sheetie is a sketch 3 plugin developed for indie game developers in mind. Sheetie creates vectorized sprite sheet objects that are automatically placed and rendered into a sketch art-board\r\n        </p>\r\n\r\n        <JMImage position = {\"center\"} width = \"300px\" height = \"auto\" src = {sheetieLogoSrc} subtitle = {\"Copyright Joseph Manto 2019\"} alt = {\"logo\"}/>\r\n\r\n        <p className={\"content-text space-left\"}>\r\n          Sheetie is written in a sketch wrapper language on obj-c called cocoa-script. Which gives you access to the underlining Obj-c api and access the the sketch development api.\r\n        </p>\r\n\r\n\r\n        <JMCode\r\n            code={codeblock1}\r\n            language={\"Objective-C\"}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst codeblock1 = `\r\nfunction makeGrid(size){\r\n\r\n   var rect;\r\n   var shapeGroup;\r\n   var fill;\r\n   var group = [[NSMutableArray alloc] init];\r\n\r\n   for(var i = 1;i*size <= width;i++){\r\n        rect = MSRectangleShape.alloc().init();\r\n        rect.frame = MSRect.rectWithRect(NSMakeRect(i*size, 0, 1, height));\r\n        shapeGroup = MSShapeGroup.shapeWithPath(rect);\r\n        shapeGroup.style().addStylePartOfType(0)\r\n        fill = shapeGroup.style().fills().firstObject();\r\n        fill.color = MSColor.colorWithRed_green_blue_alpha(181/255,9/255,255/255,1.0)\r\n        [group addObject:shapeGroup];\r\n   }\r\n   for(var i = 1;i*size <= height;i++){\r\n        rect = MSRectangleShape.alloc().init();\r\n        rect.frame = MSRect.rectWithRect(NSMakeRect(0, i*size, width, 1));\r\n        shapeGroup = MSShapeGroup.shapeWithPath(rect);\r\n        shapeGroup.style().addStylePartOfType(0);\r\n        fill = shapeGroup.style().fills().firstObject();\r\n        fill.color = MSColor.colorWithRed_green_blue_alpha(181/255,9/255,255/255,1.0)\r\n        [group addObject:shapeGroup];\r\n   }\r\n  var layer = MSLayerGroup.alloc().init();\r\n  [layer addLayers:group];\r\n  [layer setIsLocked:true];\r\n  [layer setName:@\"Contents\"]\r\n  artboard.addLayers([layer]);\r\n};`;\r\n/*\r\n* function makeGrid(size){\r\n\r\n   var rect;\r\n   var shapeGroup;\r\n   var fill;\r\n   var group = [[NSMutableArray alloc] init];\r\n\r\n   for(var i = 1;i*size <= width;i++){\r\n        rect = MSRectangleShape.alloc().init();\r\n        rect.frame = MSRect.rectWithRect(NSMakeRect(i*size, 0, 1, height));\r\n        shapeGroup = MSShapeGroup.shapeWithPath(rect);\r\n        shapeGroup.style().addStylePartOfType(0)\r\n        fill = shapeGroup.style().fills().firstObject();\r\n        fill.color = MSColor.colorWithRed_green_blue_alpha(181/255,9/255,255/255,1.0)\r\n        [group addObject:shapeGroup];\r\n   }\r\n   for(var i = 1;i*size <= height;i++){\r\n        rect = MSRectangleShape.alloc().init();\r\n        rect.frame = MSRect.rectWithRect(NSMakeRect(0, i*size, width, 1));\r\n        shapeGroup = MSShapeGroup.shapeWithPath(rect);\r\n        shapeGroup.style().addStylePartOfType(0);\r\n        fill = shapeGroup.style().fills().firstObject();\r\n        fill.color = MSColor.colorWithRed_green_blue_alpha(181/255,9/255,255/255,1.0)\r\n        [group addObject:shapeGroup];\r\n   }\r\n  var layer = MSLayerGroup.alloc().init();\r\n  [layer addLayers:group];\r\n  [layer setIsLocked:true];\r\n  [layer setName:@\"Contents\"]\r\n  artboard.addLayers([layer]);\r\n};*/"]},"metadata":{},"sourceType":"module"}